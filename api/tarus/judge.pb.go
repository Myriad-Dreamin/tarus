// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: api/tarus/judge.proto

package tarus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// status in range [0, 1024) are reserved.
type JudgeStatus int32

const (
	// never show in a correct response
	JudgeStatus_Unknown JudgeStatus = 0
	// traditional judge status, [0, 101) are reserved for judging programs.
	// accepted by checker
	JudgeStatus_Accepted JudgeStatus = 1
	// rejected by checker
	JudgeStatus_WrongAnswer JudgeStatus = 2
	// almost right but take subtle format error.
	JudgeStatus_PresentationError JudgeStatus = 3
	// The program throws some exception, sends a signal or gets a memory error such as segmentation fault.
	JudgeStatus_RuntimeError JudgeStatus = 4
	// The program tries to consume more memory than is indicated in the problem statement.
	JudgeStatus_MemoryLimitExceed JudgeStatus = 5
	// The program hadn't terminated in time indicated in the problem statement.
	JudgeStatus_TimeLimitExceed JudgeStatus = 6
	// The program touch the limit on output buffer size.
	JudgeStatus_OutputLimitExceed JudgeStatus = 7
	// if true, the points got from hint
	// for example:
	// ```
	// status: PartialResult
	// hint:
	//   points: 80
	//   message: 3 of 4 tasks passed
	// ```
	JudgeStatus_PartialResult JudgeStatus = 8
	// this status are not from runtime container, but can be returned from the JudgeService for convenience.
	//   (consider that the judge result storage can also make a response for tarus.api.judge.QueryJudge api)
	JudgeStatus_CompilationError JudgeStatus = 9
	// for not finished request.
	JudgeStatus_Running JudgeStatus = 10
	// traditional judge status, [101, 201) are reserved for judge services.
	// for internal error.
	JudgeStatus_SystemError JudgeStatus = 101
	// for security detection.
	JudgeStatus_SecurityPolicyViolation JudgeStatus = 102
	// crashing the judge checker, for the problem writers :)
	JudgeStatus_JudgeCheckerException JudgeStatus = 103
	// signal abort is raised, convert to runtime error if one wants
	JudgeStatus_AssertionFailed JudgeStatus = 104
	// signal float point exception is raised, convert to runtime error if one wants
	JudgeStatus_FloatingPointException JudgeStatus = 105
)

// Enum value maps for JudgeStatus.
var (
	JudgeStatus_name = map[int32]string{
		0:   "Unknown",
		1:   "Accepted",
		2:   "WrongAnswer",
		3:   "PresentationError",
		4:   "RuntimeError",
		5:   "MemoryLimitExceed",
		6:   "TimeLimitExceed",
		7:   "OutputLimitExceed",
		8:   "PartialResult",
		9:   "CompilationError",
		10:  "Running",
		101: "SystemError",
		102: "SecurityPolicyViolation",
		103: "JudgeCheckerException",
		104: "AssertionFailed",
		105: "FloatingPointException",
	}
	JudgeStatus_value = map[string]int32{
		"Unknown":                 0,
		"Accepted":                1,
		"WrongAnswer":             2,
		"PresentationError":       3,
		"RuntimeError":            4,
		"MemoryLimitExceed":       5,
		"TimeLimitExceed":         6,
		"OutputLimitExceed":       7,
		"PartialResult":           8,
		"CompilationError":        9,
		"Running":                 10,
		"SystemError":             101,
		"SecurityPolicyViolation": 102,
		"JudgeCheckerException":   103,
		"AssertionFailed":         104,
		"FloatingPointException":  105,
	}
)

func (x JudgeStatus) Enum() *JudgeStatus {
	p := new(JudgeStatus)
	*p = x
	return p
}

func (x JudgeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JudgeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_tarus_judge_proto_enumTypes[0].Descriptor()
}

func (JudgeStatus) Type() protoreflect.EnumType {
	return &file_api_tarus_judge_proto_enumTypes[0]
}

func (x JudgeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JudgeStatus.Descriptor instead.
func (JudgeStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{0}
}

type HandshakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion []byte `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	WebHookUrl string `protobuf:"bytes,101,opt,name=web_hook_url,json=webHookUrl,proto3" json:"web_hook_url,omitempty"`
}

func (x *HandshakeRequest) Reset() {
	*x = HandshakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandshakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandshakeRequest) ProtoMessage() {}

func (x *HandshakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandshakeRequest.ProtoReflect.Descriptor instead.
func (*HandshakeRequest) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{0}
}

func (x *HandshakeRequest) GetApiVersion() []byte {
	if x != nil {
		return x.ApiVersion
	}
	return nil
}

func (x *HandshakeRequest) GetWebHookUrl() string {
	if x != nil {
		return x.WebHookUrl
	}
	return ""
}

type HandshakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion []byte `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// you can pull the judge status mapping if inconsistent
	JudgeStatusHash string `protobuf:"bytes,2,opt,name=judge_status_hash,json=judgeStatusHash,proto3" json:"judge_status_hash,omitempty"`
	// Simplest Judge Service Only implements 3 api:
	//   CreateContainer
	//   RemoveContainer
	//   QueryJudge
	// special string:
	//   All: implemented all apis in this version
	ImplementedApis []string `protobuf:"bytes,3,rep,name=implemented_apis,json=implementedApis,proto3" json:"implemented_apis,omitempty"`
}

func (x *HandshakeResponse) Reset() {
	*x = HandshakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandshakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandshakeResponse) ProtoMessage() {}

func (x *HandshakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandshakeResponse.ProtoReflect.Descriptor instead.
func (*HandshakeResponse) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{1}
}

func (x *HandshakeResponse) GetApiVersion() []byte {
	if x != nil {
		return x.ApiVersion
	}
	return nil
}

func (x *HandshakeResponse) GetJudgeStatusHash() string {
	if x != nil {
		return x.JudgeStatusHash
	}
	return ""
}

func (x *HandshakeResponse) GetImplementedApis() []string {
	if x != nil {
		return x.ImplementedApis
	}
	return nil
}

type CreateContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskKey          []byte `protobuf:"bytes,1,opt,name=task_key,json=taskKey,proto3" json:"task_key,omitempty"`
	ImageId          string `protobuf:"bytes,2,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	BinTarget        string `protobuf:"bytes,101,opt,name=bin_target,json=binTarget,proto3" json:"bin_target,omitempty"`
	EstimatedCputime int64  `protobuf:"varint,102,opt,name=estimated_cputime,json=estimatedCputime,proto3" json:"estimated_cputime,omitempty"`
	EstimatedCpuhard int64  `protobuf:"varint,103,opt,name=estimated_cpuhard,json=estimatedCpuhard,proto3" json:"estimated_cpuhard,omitempty"`
	EstimatedMemory  int64  `protobuf:"varint,104,opt,name=estimated_memory,json=estimatedMemory,proto3" json:"estimated_memory,omitempty"`
	EstimatedStack   int64  `protobuf:"varint,105,opt,name=estimated_stack,json=estimatedStack,proto3" json:"estimated_stack,omitempty"`
}

func (x *CreateContainerRequest) Reset() {
	*x = CreateContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContainerRequest) ProtoMessage() {}

func (x *CreateContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContainerRequest.ProtoReflect.Descriptor instead.
func (*CreateContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{2}
}

func (x *CreateContainerRequest) GetTaskKey() []byte {
	if x != nil {
		return x.TaskKey
	}
	return nil
}

func (x *CreateContainerRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *CreateContainerRequest) GetBinTarget() string {
	if x != nil {
		return x.BinTarget
	}
	return ""
}

func (x *CreateContainerRequest) GetEstimatedCputime() int64 {
	if x != nil {
		return x.EstimatedCputime
	}
	return 0
}

func (x *CreateContainerRequest) GetEstimatedCpuhard() int64 {
	if x != nil {
		return x.EstimatedCpuhard
	}
	return 0
}

func (x *CreateContainerRequest) GetEstimatedMemory() int64 {
	if x != nil {
		return x.EstimatedMemory
	}
	return 0
}

func (x *CreateContainerRequest) GetEstimatedStack() int64 {
	if x != nil {
		return x.EstimatedStack
	}
	return 0
}

type BundleContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskKey []byte `protobuf:"bytes,1,opt,name=task_key,json=taskKey,proto3" json:"task_key,omitempty"`
}

func (x *BundleContainerRequest) Reset() {
	*x = BundleContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleContainerRequest) ProtoMessage() {}

func (x *BundleContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleContainerRequest.ProtoReflect.Descriptor instead.
func (*BundleContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{3}
}

func (x *BundleContainerRequest) GetTaskKey() []byte {
	if x != nil {
		return x.TaskKey
	}
	return nil
}

type RemoveContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskKey []byte `protobuf:"bytes,1,opt,name=task_key,json=taskKey,proto3" json:"task_key,omitempty"`
}

func (x *RemoveContainerRequest) Reset() {
	*x = RemoveContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveContainerRequest) ProtoMessage() {}

func (x *RemoveContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveContainerRequest.ProtoReflect.Descriptor instead.
func (*RemoveContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveContainerRequest) GetTaskKey() []byte {
	if x != nil {
		return x.TaskKey
	}
	return nil
}

type CloneContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskKey         []byte `protobuf:"bytes,1,opt,name=task_key,json=taskKey,proto3" json:"task_key,omitempty"`
	FromTaskKey     string `protobuf:"bytes,2,opt,name=from_task_key,json=fromTaskKey,proto3" json:"from_task_key,omitempty"`
	FromContainerId string `protobuf:"bytes,3,opt,name=from_container_id,json=fromContainerId,proto3" json:"from_container_id,omitempty"`
}

func (x *CloneContainerRequest) Reset() {
	*x = CloneContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneContainerRequest) ProtoMessage() {}

func (x *CloneContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneContainerRequest.ProtoReflect.Descriptor instead.
func (*CloneContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{5}
}

func (x *CloneContainerRequest) GetTaskKey() []byte {
	if x != nil {
		return x.TaskKey
	}
	return nil
}

func (x *CloneContainerRequest) GetFromTaskKey() string {
	if x != nil {
		return x.FromTaskKey
	}
	return ""
}

func (x *CloneContainerRequest) GetFromContainerId() string {
	if x != nil {
		return x.FromContainerId
	}
	return ""
}

type CheckContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugin      string `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
	TaskKey     []byte `protobuf:"bytes,2,opt,name=task_key,json=taskKey,proto3" json:"task_key,omitempty"`
	ContainerId string `protobuf:"bytes,3,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Extras      []byte `protobuf:"bytes,4,opt,name=extras,proto3" json:"extras,omitempty"`
}

func (x *CheckContainerRequest) Reset() {
	*x = CheckContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckContainerRequest) ProtoMessage() {}

func (x *CheckContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckContainerRequest.ProtoReflect.Descriptor instead.
func (*CheckContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{6}
}

func (x *CheckContainerRequest) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *CheckContainerRequest) GetTaskKey() []byte {
	if x != nil {
		return x.TaskKey
	}
	return nil
}

func (x *CheckContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *CheckContainerRequest) GetExtras() []byte {
	if x != nil {
		return x.Extras
	}
	return nil
}

type CopyFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskKey      []byte `protobuf:"bytes,1,opt,name=task_key,json=taskKey,proto3" json:"task_key,omitempty"`
	FromUrl      string `protobuf:"bytes,2,opt,name=from_url,json=fromUrl,proto3" json:"from_url,omitempty"`
	ToPath       string `protobuf:"bytes,3,opt,name=to_path,json=toPath,proto3" json:"to_path,omitempty"`
	OverrideFile bool   `protobuf:"varint,101,opt,name=override_file,json=overrideFile,proto3" json:"override_file,omitempty"`
}

func (x *CopyFileRequest) Reset() {
	*x = CopyFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFileRequest) ProtoMessage() {}

func (x *CopyFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFileRequest.ProtoReflect.Descriptor instead.
func (*CopyFileRequest) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{7}
}

func (x *CopyFileRequest) GetTaskKey() []byte {
	if x != nil {
		return x.TaskKey
	}
	return nil
}

func (x *CopyFileRequest) GetFromUrl() string {
	if x != nil {
		return x.FromUrl
	}
	return ""
}

func (x *CopyFileRequest) GetToPath() string {
	if x != nil {
		return x.ToPath
	}
	return ""
}

func (x *CopyFileRequest) GetOverrideFile() bool {
	if x != nil {
		return x.OverrideFile
	}
	return false
}

type CompileProgramRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskKey       []byte `protobuf:"bytes,1,opt,name=task_key,json=taskKey,proto3" json:"task_key,omitempty"`
	FromUrl       string `protobuf:"bytes,2,opt,name=from_url,json=fromUrl,proto3" json:"from_url,omitempty"`
	ToPath        string `protobuf:"bytes,3,opt,name=to_path,json=toPath,proto3" json:"to_path,omitempty"`
	CompileTarget string `protobuf:"bytes,101,opt,name=compile_target,json=compileTarget,proto3" json:"compile_target,omitempty"`
	// temporal open or close several compile flags such as asan, O0, O1, O2, O3
	CompileFeatures []string `protobuf:"bytes,102,rep,name=compile_features,json=compileFeatures,proto3" json:"compile_features,omitempty"`
	OverrideFile    bool     `protobuf:"varint,103,opt,name=override_file,json=overrideFile,proto3" json:"override_file,omitempty"`
}

func (x *CompileProgramRequest) Reset() {
	*x = CompileProgramRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileProgramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileProgramRequest) ProtoMessage() {}

func (x *CompileProgramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileProgramRequest.ProtoReflect.Descriptor instead.
func (*CompileProgramRequest) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{8}
}

func (x *CompileProgramRequest) GetTaskKey() []byte {
	if x != nil {
		return x.TaskKey
	}
	return nil
}

func (x *CompileProgramRequest) GetFromUrl() string {
	if x != nil {
		return x.FromUrl
	}
	return ""
}

func (x *CompileProgramRequest) GetToPath() string {
	if x != nil {
		return x.ToPath
	}
	return ""
}

func (x *CompileProgramRequest) GetCompileTarget() string {
	if x != nil {
		return x.CompileTarget
	}
	return ""
}

func (x *CompileProgramRequest) GetCompileFeatures() []string {
	if x != nil {
		return x.CompileFeatures
	}
	return nil
}

func (x *CompileProgramRequest) GetOverrideFile() bool {
	if x != nil {
		return x.OverrideFile
	}
	return false
}

type CompileProgramResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diag string `protobuf:"bytes,1,opt,name=diag,proto3" json:"diag,omitempty"`
	Code int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *CompileProgramResponse) Reset() {
	*x = CompileProgramResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileProgramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileProgramResponse) ProtoMessage() {}

func (x *CompileProgramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileProgramResponse.ProtoReflect.Descriptor instead.
func (*CompileProgramResponse) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{9}
}

func (x *CompileProgramResponse) GetDiag() string {
	if x != nil {
		return x.Diag
	}
	return ""
}

func (x *CompileProgramResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type JudgeTestcase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JudgeKey []byte `protobuf:"bytes,1,opt,name=judge_key,json=judgeKey,proto3" json:"judge_key,omitempty"`
	// control behavior of the stdin and stdout of problem solver's process
	IoProvider string `protobuf:"bytes,2,opt,name=io_provider,json=ioProvider,proto3" json:"io_provider,omitempty"`
	// input argument for io_provider
	Input string `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	// output argument for io_provider
	Answer           string `protobuf:"bytes,4,opt,name=answer,proto3" json:"answer,omitempty"`
	EstimatedCputime int64  `protobuf:"varint,101,opt,name=estimated_cputime,json=estimatedCputime,proto3" json:"estimated_cputime,omitempty"`
	EstimatedCpuhard int64  `protobuf:"varint,102,opt,name=estimated_cpuhard,json=estimatedCpuhard,proto3" json:"estimated_cpuhard,omitempty"`
	EstimatedMemory  int64  `protobuf:"varint,103,opt,name=estimated_memory,json=estimatedMemory,proto3" json:"estimated_memory,omitempty"`
	EstimatedStack   int64  `protobuf:"varint,104,opt,name=estimated_stack,json=estimatedStack,proto3" json:"estimated_stack,omitempty"`
}

func (x *JudgeTestcase) Reset() {
	*x = JudgeTestcase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeTestcase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeTestcase) ProtoMessage() {}

func (x *JudgeTestcase) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeTestcase.ProtoReflect.Descriptor instead.
func (*JudgeTestcase) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{10}
}

func (x *JudgeTestcase) GetJudgeKey() []byte {
	if x != nil {
		return x.JudgeKey
	}
	return nil
}

func (x *JudgeTestcase) GetIoProvider() string {
	if x != nil {
		return x.IoProvider
	}
	return ""
}

func (x *JudgeTestcase) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *JudgeTestcase) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *JudgeTestcase) GetEstimatedCputime() int64 {
	if x != nil {
		return x.EstimatedCputime
	}
	return 0
}

func (x *JudgeTestcase) GetEstimatedCpuhard() int64 {
	if x != nil {
		return x.EstimatedCpuhard
	}
	return 0
}

func (x *JudgeTestcase) GetEstimatedMemory() int64 {
	if x != nil {
		return x.EstimatedMemory
	}
	return 0
}

func (x *JudgeTestcase) GetEstimatedStack() int64 {
	if x != nil {
		return x.EstimatedStack
	}
	return 0
}

type MakeJudgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskKey    []byte           `protobuf:"bytes,1,opt,name=task_key,json=taskKey,proto3" json:"task_key,omitempty"`
	IoProvider string           `protobuf:"bytes,2,opt,name=io_provider,json=ioProvider,proto3" json:"io_provider,omitempty"`
	Testcases  []*JudgeTestcase `protobuf:"bytes,3,rep,name=testcases,proto3" json:"testcases,omitempty"`
	IsAsync    bool             `protobuf:"varint,101,opt,name=is_async,json=isAsync,proto3" json:"is_async,omitempty"`
	Cputime    int64            `protobuf:"varint,102,opt,name=cputime,proto3" json:"cputime,omitempty"`
	Cpuhard    int64            `protobuf:"varint,103,opt,name=cpuhard,proto3" json:"cpuhard,omitempty"`
	Memory     int64            `protobuf:"varint,104,opt,name=memory,proto3" json:"memory,omitempty"`
	Stack      int64            `protobuf:"varint,105,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (x *MakeJudgeRequest) Reset() {
	*x = MakeJudgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeJudgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeJudgeRequest) ProtoMessage() {}

func (x *MakeJudgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeJudgeRequest.ProtoReflect.Descriptor instead.
func (*MakeJudgeRequest) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{11}
}

func (x *MakeJudgeRequest) GetTaskKey() []byte {
	if x != nil {
		return x.TaskKey
	}
	return nil
}

func (x *MakeJudgeRequest) GetIoProvider() string {
	if x != nil {
		return x.IoProvider
	}
	return ""
}

func (x *MakeJudgeRequest) GetTestcases() []*JudgeTestcase {
	if x != nil {
		return x.Testcases
	}
	return nil
}

func (x *MakeJudgeRequest) GetIsAsync() bool {
	if x != nil {
		return x.IsAsync
	}
	return false
}

func (x *MakeJudgeRequest) GetCputime() int64 {
	if x != nil {
		return x.Cputime
	}
	return 0
}

func (x *MakeJudgeRequest) GetCpuhard() int64 {
	if x != nil {
		return x.Cpuhard
	}
	return 0
}

func (x *MakeJudgeRequest) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *MakeJudgeRequest) GetStack() int64 {
	if x != nil {
		return x.Stack
	}
	return 0
}

type MakeJudgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// empty if is_async == true
	Items []*QueryJudgeItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// experimental fields
	// serving == len(requests) - (waiting + len(items))
	Waiting int32 `protobuf:"varint,101,opt,name=waiting,proto3" json:"waiting,omitempty"`
	// experimental fields
	// the service is likely recover at the time (time.Now() + qos_wait * time.Millisecond)
	// the qos is disabled if qos_wait == 0
	QosWait int32 `protobuf:"varint,102,opt,name=qos_wait,json=qosWait,proto3" json:"qos_wait,omitempty"`
}

func (x *MakeJudgeResponse) Reset() {
	*x = MakeJudgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeJudgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeJudgeResponse) ProtoMessage() {}

func (x *MakeJudgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeJudgeResponse.ProtoReflect.Descriptor instead.
func (*MakeJudgeResponse) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{12}
}

func (x *MakeJudgeResponse) GetItems() []*QueryJudgeItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MakeJudgeResponse) GetWaiting() int32 {
	if x != nil {
		return x.Waiting
	}
	return 0
}

func (x *MakeJudgeResponse) GetQosWait() int32 {
	if x != nil {
		return x.QosWait
	}
	return 0
}

type QueryJudgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskKey  []byte `protobuf:"bytes,1,opt,name=task_key,json=taskKey,proto3" json:"task_key,omitempty"`
	JudgeKey []byte `protobuf:"bytes,2,opt,name=judge_key,json=judgeKey,proto3" json:"judge_key,omitempty"`
}

func (x *QueryJudgeRequest) Reset() {
	*x = QueryJudgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJudgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJudgeRequest) ProtoMessage() {}

func (x *QueryJudgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJudgeRequest.ProtoReflect.Descriptor instead.
func (*QueryJudgeRequest) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{13}
}

func (x *QueryJudgeRequest) GetTaskKey() []byte {
	if x != nil {
		return x.TaskKey
	}
	return nil
}

func (x *QueryJudgeRequest) GetJudgeKey() []byte {
	if x != nil {
		return x.JudgeKey
	}
	return nil
}

type QueryJudgeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JudgeKey  []byte      `protobuf:"bytes,1,opt,name=judge_key,json=judgeKey,proto3" json:"judge_key,omitempty"`
	TimeUse   int64       `protobuf:"varint,2,opt,name=time_use,json=timeUse,proto3" json:"time_use,omitempty"`
	MemoryUse int64       `protobuf:"varint,3,opt,name=memory_use,json=memoryUse,proto3" json:"memory_use,omitempty"`
	Status    JudgeStatus `protobuf:"varint,4,opt,name=status,proto3,enum=tarus.api.judge.JudgeStatus" json:"status,omitempty"`
	// customized message here, most likely return something special for judge server
	// some possible fields including:
	//  points: subtask bonus
	//  message: compilation error
	//  signal: memory error, floating point exception, etc.
	//  checker: asan report, seccomp violation, etc.
	// if you are looking for attaching the listed properties, please encode them into the `hint` field.
	Hint        []byte `protobuf:"bytes,101,opt,name=hint,proto3" json:"hint,omitempty"`
	TimeUseHard int64  `protobuf:"varint,102,opt,name=time_use_hard,json=timeUseHard,proto3" json:"time_use_hard,omitempty"`
}

func (x *QueryJudgeItem) Reset() {
	*x = QueryJudgeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJudgeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJudgeItem) ProtoMessage() {}

func (x *QueryJudgeItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJudgeItem.ProtoReflect.Descriptor instead.
func (*QueryJudgeItem) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{14}
}

func (x *QueryJudgeItem) GetJudgeKey() []byte {
	if x != nil {
		return x.JudgeKey
	}
	return nil
}

func (x *QueryJudgeItem) GetTimeUse() int64 {
	if x != nil {
		return x.TimeUse
	}
	return 0
}

func (x *QueryJudgeItem) GetMemoryUse() int64 {
	if x != nil {
		return x.MemoryUse
	}
	return 0
}

func (x *QueryJudgeItem) GetStatus() JudgeStatus {
	if x != nil {
		return x.Status
	}
	return JudgeStatus_Unknown
}

func (x *QueryJudgeItem) GetHint() []byte {
	if x != nil {
		return x.Hint
	}
	return nil
}

func (x *QueryJudgeItem) GetTimeUseHard() int64 {
	if x != nil {
		return x.TimeUseHard
	}
	return 0
}

type QueryJudgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*QueryJudgeItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *QueryJudgeResponse) Reset() {
	*x = QueryJudgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tarus_judge_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJudgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJudgeResponse) ProtoMessage() {}

func (x *QueryJudgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_tarus_judge_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJudgeResponse.ProtoReflect.Descriptor instead.
func (*QueryJudgeResponse) Descriptor() ([]byte, []int) {
	return file_api_tarus_judge_proto_rawDescGZIP(), []int{15}
}

func (x *QueryJudgeResponse) GetItems() []*QueryJudgeItem {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_api_tarus_judge_proto protoreflect.FileDescriptor

var file_api_tarus_judge_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x61, 0x72, 0x75, 0x73, 0x2f, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x61, 0x72, 0x75, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x10, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x65,
	0x62, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x22, 0x8b, 0x01, 0x0a,
	0x11, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x29, 0x0a, 0x10, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x70, 0x69, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x70, 0x69, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x4b, 0x65, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x69, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x69, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x70, 0x75, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x70, 0x75, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x70, 0x75, 0x68, 0x61, 0x72, 0x64, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x70, 0x75,
	0x68, 0x61, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x18, 0x69, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x33, 0x0a, 0x16, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x4b, 0x65, 0x79, 0x22, 0x33, 0x0a,
	0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x4b,
	0x65, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x22,
	0x85, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x66, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x40, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x69, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa9, 0x02, 0x0a, 0x0d, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6f, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x70, 0x75, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x70, 0x75,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x70, 0x75, 0x68, 0x61, 0x72, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x70, 0x75, 0x68, 0x61, 0x72,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x89, 0x02, 0x0a, 0x10, 0x4d, 0x61, 0x6b, 0x65, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6f, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x61, 0x72, 0x75,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x70, 0x75, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x70, 0x75, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x70, 0x75,
	0x68, 0x61, 0x72, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x70, 0x75, 0x68,
	0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x18, 0x69, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x22, 0x7f, 0x0a, 0x11, 0x4d, 0x61, 0x6b, 0x65, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x61, 0x72, 0x75, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x6f, 0x73, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x6f, 0x73, 0x57, 0x61,
	0x69, 0x74, 0x22, 0x4b, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x4b,
	0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x22,
	0xd5, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x61, 0x72, 0x75,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x68, 0x61, 0x72, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x55, 0x73, 0x65, 0x48, 0x61, 0x72, 0x64, 0x22, 0x4b, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x61, 0x72, 0x75, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x2a, 0xd5, 0x02, 0x0a, 0x0b, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x10, 0x05,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x08, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x66,
	0x12, 0x19, 0x0a, 0x15, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x68,
	0x12, 0x1a, 0x0a, 0x16, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x69, 0x32, 0xd6, 0x06, 0x0a,
	0x0c, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a,
	0x09, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x72,
	0x75, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x74, 0x61, 0x72, 0x75, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x74, 0x61, 0x72, 0x75, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x0f, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x74, 0x61, 0x72, 0x75, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x0f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x74,
	0x61, 0x72, 0x75, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x50, 0x0a,
	0x0e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x26, 0x2e, 0x74, 0x61, 0x72, 0x75, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x50, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x72, 0x75, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x44, 0x0a, 0x08, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e,
	0x74, 0x61, 0x72, 0x75, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e,
	0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x72, 0x75,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x74, 0x61, 0x72, 0x75, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x4d, 0x61,
	0x6b, 0x65, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x72, 0x75, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x61, 0x72,
	0x75, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x6b,
	0x65, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55,
	0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x74,
	0x61, 0x72, 0x75, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x74, 0x61, 0x72, 0x75, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0e, 0x5a, 0x0c, 0x74, 0x61, 0x72, 0x75, 0x73, 0x2f, 0x3b,
	0x74, 0x61, 0x72, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_tarus_judge_proto_rawDescOnce sync.Once
	file_api_tarus_judge_proto_rawDescData = file_api_tarus_judge_proto_rawDesc
)

func file_api_tarus_judge_proto_rawDescGZIP() []byte {
	file_api_tarus_judge_proto_rawDescOnce.Do(func() {
		file_api_tarus_judge_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_tarus_judge_proto_rawDescData)
	})
	return file_api_tarus_judge_proto_rawDescData
}

var file_api_tarus_judge_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_tarus_judge_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_api_tarus_judge_proto_goTypes = []interface{}{
	(JudgeStatus)(0),               // 0: tarus.api.judge.JudgeStatus
	(*HandshakeRequest)(nil),       // 1: tarus.api.judge.HandshakeRequest
	(*HandshakeResponse)(nil),      // 2: tarus.api.judge.HandshakeResponse
	(*CreateContainerRequest)(nil), // 3: tarus.api.judge.CreateContainerRequest
	(*BundleContainerRequest)(nil), // 4: tarus.api.judge.BundleContainerRequest
	(*RemoveContainerRequest)(nil), // 5: tarus.api.judge.RemoveContainerRequest
	(*CloneContainerRequest)(nil),  // 6: tarus.api.judge.CloneContainerRequest
	(*CheckContainerRequest)(nil),  // 7: tarus.api.judge.CheckContainerRequest
	(*CopyFileRequest)(nil),        // 8: tarus.api.judge.CopyFileRequest
	(*CompileProgramRequest)(nil),  // 9: tarus.api.judge.CompileProgramRequest
	(*CompileProgramResponse)(nil), // 10: tarus.api.judge.CompileProgramResponse
	(*JudgeTestcase)(nil),          // 11: tarus.api.judge.JudgeTestcase
	(*MakeJudgeRequest)(nil),       // 12: tarus.api.judge.MakeJudgeRequest
	(*MakeJudgeResponse)(nil),      // 13: tarus.api.judge.MakeJudgeResponse
	(*QueryJudgeRequest)(nil),      // 14: tarus.api.judge.QueryJudgeRequest
	(*QueryJudgeItem)(nil),         // 15: tarus.api.judge.QueryJudgeItem
	(*QueryJudgeResponse)(nil),     // 16: tarus.api.judge.QueryJudgeResponse
	(*emptypb.Empty)(nil),          // 17: google.protobuf.Empty
}
var file_api_tarus_judge_proto_depIdxs = []int32{
	11, // 0: tarus.api.judge.MakeJudgeRequest.testcases:type_name -> tarus.api.judge.JudgeTestcase
	15, // 1: tarus.api.judge.MakeJudgeResponse.items:type_name -> tarus.api.judge.QueryJudgeItem
	0,  // 2: tarus.api.judge.QueryJudgeItem.status:type_name -> tarus.api.judge.JudgeStatus
	15, // 3: tarus.api.judge.QueryJudgeResponse.items:type_name -> tarus.api.judge.QueryJudgeItem
	1,  // 4: tarus.api.judge.JudgeService.Handshake:input_type -> tarus.api.judge.HandshakeRequest
	3,  // 5: tarus.api.judge.JudgeService.CreateContainer:input_type -> tarus.api.judge.CreateContainerRequest
	4,  // 6: tarus.api.judge.JudgeService.BundleContainer:input_type -> tarus.api.judge.BundleContainerRequest
	5,  // 7: tarus.api.judge.JudgeService.RemoveContainer:input_type -> tarus.api.judge.RemoveContainerRequest
	6,  // 8: tarus.api.judge.JudgeService.CloneContainer:input_type -> tarus.api.judge.CloneContainerRequest
	7,  // 9: tarus.api.judge.JudgeService.CheckContainer:input_type -> tarus.api.judge.CheckContainerRequest
	8,  // 10: tarus.api.judge.JudgeService.CopyFile:input_type -> tarus.api.judge.CopyFileRequest
	9,  // 11: tarus.api.judge.JudgeService.CompileProgram:input_type -> tarus.api.judge.CompileProgramRequest
	12, // 12: tarus.api.judge.JudgeService.MakeJudge:input_type -> tarus.api.judge.MakeJudgeRequest
	14, // 13: tarus.api.judge.JudgeService.QueryJudge:input_type -> tarus.api.judge.QueryJudgeRequest
	2,  // 14: tarus.api.judge.JudgeService.Handshake:output_type -> tarus.api.judge.HandshakeResponse
	17, // 15: tarus.api.judge.JudgeService.CreateContainer:output_type -> google.protobuf.Empty
	17, // 16: tarus.api.judge.JudgeService.BundleContainer:output_type -> google.protobuf.Empty
	17, // 17: tarus.api.judge.JudgeService.RemoveContainer:output_type -> google.protobuf.Empty
	17, // 18: tarus.api.judge.JudgeService.CloneContainer:output_type -> google.protobuf.Empty
	17, // 19: tarus.api.judge.JudgeService.CheckContainer:output_type -> google.protobuf.Empty
	17, // 20: tarus.api.judge.JudgeService.CopyFile:output_type -> google.protobuf.Empty
	10, // 21: tarus.api.judge.JudgeService.CompileProgram:output_type -> tarus.api.judge.CompileProgramResponse
	13, // 22: tarus.api.judge.JudgeService.MakeJudge:output_type -> tarus.api.judge.MakeJudgeResponse
	16, // 23: tarus.api.judge.JudgeService.QueryJudge:output_type -> tarus.api.judge.QueryJudgeResponse
	14, // [14:24] is the sub-list for method output_type
	4,  // [4:14] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_api_tarus_judge_proto_init() }
func file_api_tarus_judge_proto_init() {
	if File_api_tarus_judge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_tarus_judge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandshakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tarus_judge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandshakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tarus_judge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tarus_judge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tarus_judge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tarus_judge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tarus_judge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tarus_judge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tarus_judge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileProgramRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tarus_judge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileProgramResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tarus_judge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeTestcase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tarus_judge_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeJudgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tarus_judge_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeJudgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tarus_judge_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJudgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tarus_judge_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJudgeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tarus_judge_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJudgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_tarus_judge_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_tarus_judge_proto_goTypes,
		DependencyIndexes: file_api_tarus_judge_proto_depIdxs,
		EnumInfos:         file_api_tarus_judge_proto_enumTypes,
		MessageInfos:      file_api_tarus_judge_proto_msgTypes,
	}.Build()
	File_api_tarus_judge_proto = out.File
	file_api_tarus_judge_proto_rawDesc = nil
	file_api_tarus_judge_proto_goTypes = nil
	file_api_tarus_judge_proto_depIdxs = nil
}
