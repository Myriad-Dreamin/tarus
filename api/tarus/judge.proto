syntax = "proto3";

package tarus.api.judge;

import "google/protobuf/empty.proto";

option go_package = "tarus/;tarus";

message HandshakeRequest {
  bytes api_version = 1;
  string web_hook_url = 101;
}

message HandshakeResponse {
  // you can pull the judge status mapping if inconsistent
  string judge_status_hash = 1;
}

message CreateContainerRequest {
  bytes task_key = 1;
  string image_id = 2;
  string bin_target = 101;
  int64 estimated_cputime = 102;
  int64 estimated_cpuhard = 103;
  int64 estimated_memory = 104;
  int64 estimated_stack = 105;
}

message BundleContainerRequest {
  bytes task_key = 1;
}

message RemoveContainerRequest {
  bytes task_key = 1;
}

message CloneContainerRequest {
  bytes task_key = 1;
  string from_task_key = 2;
  string from_container_id = 3;
}

message CheckContainerRequest {
  string plugin = 1;
  bytes task_key = 2;
  string container_id = 3;
  bytes extras = 4;
}

message CopyRequest {
  bytes task_key = 1;
  string from_url = 2;
  string to_path = 3;
}

message CompileProgramRequest {
  bytes task_key = 1;
  string from_url = 2;
  string to_path = 3;
  string compile_target = 101;
  // temporal open or close several compile flags such as asan, O0, O1, O2, O3
  repeated string compile_features = 102;
}

message MakeJudgeItem {
  bytes judge_key = 1;
  string io_provider = 2;
  // stdin
  string input_url = 3;
  // stdout
  string output_url = 4;
  int64 estimated_cputime = 101;
  int64 estimated_cpuhard = 102;
  int64 estimated_memory = 103;
  int64 estimated_stack = 104;
}

message MakeJudgeRequest {
  bytes task_key = 1;
  repeated MakeJudgeItem items = 2;
  bool is_async = 101;
}

message QueryJudgeRequest {
  bytes task_key = 1;
  bytes judge_key = 2;
}

// status in range [0, 1024) are reserved.
enum JudgeStatus {
  // never show in a correct response
  Unknown = 0;

  // traditional judge status, [0, 101) are reserved for judging programs.
  // accepted by checker
  Accepted = 1;
  // rejected by checker
  WrongAnswer = 2;
  // almost right but take subtle format error.
  PresentationError = 3;

  // The program throws some exception, sends a signal or gets a memory error such as segmentation fault.
  RuntimeError = 4;
  // The program tries to consume more memory than is indicated in the problem statement.
  MemoryLimitExceed = 5;
  // The program hadn't terminated in time indicated in the problem statement.
  TimeLimitExceed = 6;
  // The program touch the limit on output buffer size.
  OutputLimitExceed = 7;

  // if true, the points got from hint
  // for example:
  // ```
  // status: PartialResult
  // hint:
  //   points: 80
  //   message: 3 of 4 tasks passed
  // ```
  PartialResult = 8;
  // this status are not from runtime container, but can be returned from the JudgeService for convenience.
  //   (consider that the judge result storage can also make a response for tarus.api.judge.QueryJudge api)
  CompilationError = 9;
  // for not finished request.
  Running = 10;

  // traditional judge status, [101, 201) are reserved for judge services.
  // for internal error.
  SystemError = 101;
  // for security detection.
  SecurityPolicyViolation = 102;
  // crashing the judge checker, for the problem writers :)
  JudgeCheckerException = 103;

}

message QueryJudgeItem {
  bytes judge_key = 1;
  int64 time_use = 101;
  int64 memory_use = 102;
  JudgeStatus status = 103;
  // customized message here, most likely return something special for judge server
  // some possible fields including:
  //  points: subtask bonus
  //  message: compilation error
  //  signal: memory error, floating point exception, etc.
  //  checker: asan report, seccomp violation, etc.
  // if you are looking for attaching the listed properties, please encode them into the `hint` field.
  bytes hint = 104;

  // type your_extension on query judge item = 1001...;
}

message QueryJudgeResponse {
  repeated QueryJudgeItem items = 1;
}

// internal judge service, containing low level operations, hence requires privilege
service JudgeService {
  rpc Handshake(HandshakeRequest) returns (HandshakeResponse);

  // Environment Management
  // Create
  rpc CreateContainer(CreateContainerRequest) returns (google.protobuf.Empty);
  // Bundle
  rpc BundleContainer(BundleContainerRequest) returns (google.protobuf.Empty);
  // Remove
  rpc RemoveContainer(RemoveContainerRequest) returns (google.protobuf.Empty);
  // Clone
  rpc CloneContainer(CloneContainerRequest) returns (google.protobuf.Empty);
  // Check (single container or list container)
  // simple debugging. don't design complex plugin on it...
  rpc CheckContainer(CheckContainerRequest) returns (google.protobuf.Empty);

  // Judge Program (Compile it).
  //   please notice that the container environment is prepared by container bundle.
  // copy binary is dangerous, but one can use this api to upload program.
  rpc CopyFile(CopyRequest) returns (google.protobuf.Empty);
  // compile by the judge service with security checking
  rpc CompileProgram(CompileProgramRequest) returns (google.protobuf.Empty);

  // Judge Program (Run it).
  // Judge multiple times.
  rpc MakeJudge(MakeJudgeRequest) returns (google.protobuf.Empty);
  // Query.
  rpc QueryJudge(QueryJudgeRequest) returns (QueryJudgeResponse);
}
