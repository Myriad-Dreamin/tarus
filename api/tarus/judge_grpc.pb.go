// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tarus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JudgeServiceClient is the client API for JudgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JudgeServiceClient interface {
	Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error)
	// Environment Management
	// Create
	CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Bundle
	BundleContainer(ctx context.Context, in *BundleContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Remove
	RemoveContainer(ctx context.Context, in *RemoveContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Clone
	CloneContainer(ctx context.Context, in *CloneContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Check (single container or list container)
	// simple debugging. don't design complex plugin on it...
	CheckContainer(ctx context.Context, in *CheckContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Judge Program (Compile it).
	//   please notice that the container environment is prepared by container bundle.
	// copy binary is dangerous, but one can use this api to upload program.
	CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// compile by the judge service with security checking
	CompileProgram(ctx context.Context, in *CompileProgramRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Judge Program (Run it).
	// Judge multiple times.
	// The judge service MUST accept all judge requests, and indicates the congestion by `MakeJudgeResponse.waiting`.
	// One user should place a high priority request before other requests in `MakeJudgeRequest.items`.
	// One user can cancel the waiting request in time.
	// The synchronized request will not block a service if it comes to the waiting status.
	MakeJudge(ctx context.Context, in *MakeJudgeRequest, opts ...grpc.CallOption) (*MakeJudgeResponse, error)
	// Query.
	QueryJudge(ctx context.Context, in *QueryJudgeRequest, opts ...grpc.CallOption) (*QueryJudgeResponse, error)
}

type judgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJudgeServiceClient(cc grpc.ClientConnInterface) JudgeServiceClient {
	return &judgeServiceClient{cc}
}

func (c *judgeServiceClient) Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error) {
	out := new(HandshakeResponse)
	err := c.cc.Invoke(ctx, "/tarus.api.judge.JudgeService/Handshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tarus.api.judge.JudgeService/CreateContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) BundleContainer(ctx context.Context, in *BundleContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tarus.api.judge.JudgeService/BundleContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) RemoveContainer(ctx context.Context, in *RemoveContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tarus.api.judge.JudgeService/RemoveContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) CloneContainer(ctx context.Context, in *CloneContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tarus.api.judge.JudgeService/CloneContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) CheckContainer(ctx context.Context, in *CheckContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tarus.api.judge.JudgeService/CheckContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tarus.api.judge.JudgeService/CopyFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) CompileProgram(ctx context.Context, in *CompileProgramRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tarus.api.judge.JudgeService/CompileProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) MakeJudge(ctx context.Context, in *MakeJudgeRequest, opts ...grpc.CallOption) (*MakeJudgeResponse, error) {
	out := new(MakeJudgeResponse)
	err := c.cc.Invoke(ctx, "/tarus.api.judge.JudgeService/MakeJudge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) QueryJudge(ctx context.Context, in *QueryJudgeRequest, opts ...grpc.CallOption) (*QueryJudgeResponse, error) {
	out := new(QueryJudgeResponse)
	err := c.cc.Invoke(ctx, "/tarus.api.judge.JudgeService/QueryJudge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JudgeServiceServer is the server API for JudgeService service.
// All implementations must embed UnimplementedJudgeServiceServer
// for forward compatibility
type JudgeServiceServer interface {
	Handshake(context.Context, *HandshakeRequest) (*HandshakeResponse, error)
	// Environment Management
	// Create
	CreateContainer(context.Context, *CreateContainerRequest) (*emptypb.Empty, error)
	// Bundle
	BundleContainer(context.Context, *BundleContainerRequest) (*emptypb.Empty, error)
	// Remove
	RemoveContainer(context.Context, *RemoveContainerRequest) (*emptypb.Empty, error)
	// Clone
	CloneContainer(context.Context, *CloneContainerRequest) (*emptypb.Empty, error)
	// Check (single container or list container)
	// simple debugging. don't design complex plugin on it...
	CheckContainer(context.Context, *CheckContainerRequest) (*emptypb.Empty, error)
	// Judge Program (Compile it).
	//   please notice that the container environment is prepared by container bundle.
	// copy binary is dangerous, but one can use this api to upload program.
	CopyFile(context.Context, *CopyFileRequest) (*emptypb.Empty, error)
	// compile by the judge service with security checking
	CompileProgram(context.Context, *CompileProgramRequest) (*emptypb.Empty, error)
	// Judge Program (Run it).
	// Judge multiple times.
	// The judge service MUST accept all judge requests, and indicates the congestion by `MakeJudgeResponse.waiting`.
	// One user should place a high priority request before other requests in `MakeJudgeRequest.items`.
	// One user can cancel the waiting request in time.
	// The synchronized request will not block a service if it comes to the waiting status.
	MakeJudge(context.Context, *MakeJudgeRequest) (*MakeJudgeResponse, error)
	// Query.
	QueryJudge(context.Context, *QueryJudgeRequest) (*QueryJudgeResponse, error)
	mustEmbedUnimplementedJudgeServiceServer()
}

// UnimplementedJudgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJudgeServiceServer struct {
}

func (UnimplementedJudgeServiceServer) Handshake(context.Context, *HandshakeRequest) (*HandshakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedJudgeServiceServer) CreateContainer(context.Context, *CreateContainerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (UnimplementedJudgeServiceServer) BundleContainer(context.Context, *BundleContainerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BundleContainer not implemented")
}
func (UnimplementedJudgeServiceServer) RemoveContainer(context.Context, *RemoveContainerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveContainer not implemented")
}
func (UnimplementedJudgeServiceServer) CloneContainer(context.Context, *CloneContainerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneContainer not implemented")
}
func (UnimplementedJudgeServiceServer) CheckContainer(context.Context, *CheckContainerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckContainer not implemented")
}
func (UnimplementedJudgeServiceServer) CopyFile(context.Context, *CopyFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (UnimplementedJudgeServiceServer) CompileProgram(context.Context, *CompileProgramRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompileProgram not implemented")
}
func (UnimplementedJudgeServiceServer) MakeJudge(context.Context, *MakeJudgeRequest) (*MakeJudgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeJudge not implemented")
}
func (UnimplementedJudgeServiceServer) QueryJudge(context.Context, *QueryJudgeRequest) (*QueryJudgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJudge not implemented")
}
func (UnimplementedJudgeServiceServer) mustEmbedUnimplementedJudgeServiceServer() {}

// UnsafeJudgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JudgeServiceServer will
// result in compilation errors.
type UnsafeJudgeServiceServer interface {
	mustEmbedUnimplementedJudgeServiceServer()
}

func RegisterJudgeServiceServer(s grpc.ServiceRegistrar, srv JudgeServiceServer) {
	s.RegisterService(&JudgeService_ServiceDesc, srv)
}

func _JudgeService_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tarus.api.judge.JudgeService/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).Handshake(ctx, req.(*HandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tarus.api.judge.JudgeService/CreateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).CreateContainer(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_BundleContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BundleContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).BundleContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tarus.api.judge.JudgeService/BundleContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).BundleContainer(ctx, req.(*BundleContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_RemoveContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).RemoveContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tarus.api.judge.JudgeService/RemoveContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).RemoveContainer(ctx, req.(*RemoveContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_CloneContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).CloneContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tarus.api.judge.JudgeService/CloneContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).CloneContainer(ctx, req.(*CloneContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_CheckContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).CheckContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tarus.api.judge.JudgeService/CheckContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).CheckContainer(ctx, req.(*CheckContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tarus.api.judge.JudgeService/CopyFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).CopyFile(ctx, req.(*CopyFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_CompileProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).CompileProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tarus.api.judge.JudgeService/CompileProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).CompileProgram(ctx, req.(*CompileProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_MakeJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeJudgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).MakeJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tarus.api.judge.JudgeService/MakeJudge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).MakeJudge(ctx, req.(*MakeJudgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_QueryJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJudgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).QueryJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tarus.api.judge.JudgeService/QueryJudge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).QueryJudge(ctx, req.(*QueryJudgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JudgeService_ServiceDesc is the grpc.ServiceDesc for JudgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JudgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tarus.api.judge.JudgeService",
	HandlerType: (*JudgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _JudgeService_Handshake_Handler,
		},
		{
			MethodName: "CreateContainer",
			Handler:    _JudgeService_CreateContainer_Handler,
		},
		{
			MethodName: "BundleContainer",
			Handler:    _JudgeService_BundleContainer_Handler,
		},
		{
			MethodName: "RemoveContainer",
			Handler:    _JudgeService_RemoveContainer_Handler,
		},
		{
			MethodName: "CloneContainer",
			Handler:    _JudgeService_CloneContainer_Handler,
		},
		{
			MethodName: "CheckContainer",
			Handler:    _JudgeService_CheckContainer_Handler,
		},
		{
			MethodName: "CopyFile",
			Handler:    _JudgeService_CopyFile_Handler,
		},
		{
			MethodName: "CompileProgram",
			Handler:    _JudgeService_CompileProgram_Handler,
		},
		{
			MethodName: "MakeJudge",
			Handler:    _JudgeService_MakeJudge_Handler,
		},
		{
			MethodName: "QueryJudge",
			Handler:    _JudgeService_QueryJudge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tarus/judge.proto",
}
